<?php

namespace App\Tests\Functional;

use App\Factory\DragonTreasureFactory;
use App\Factory\UserFactory;
use Symfony\Component\HttpFoundation\Response;

class DragonTreasureResourceTest extends ApiTestCase
{
    public function testGetCollectionOfTreasures(): void
    {
        DragonTreasureFactory::createMany(5);

        $json = $this->browser()
            ->get('/api/treasures')
            ->assertJson()
            ->assertJsonMatches('"hydra:totalItems"', 5)
            ->assertJsonMatches('length("hydra:member")', 5)
            ->json();

        $this->assertSame(array_keys($json->decoded()['hydra:member'][0]), [
            '@id', '@type', 'name', 'description', 'value', 'coolFactor', 'owner', 'shortDescription', 'plunderedAtAgo',
        ]);
    }

    public function testPostToCreateTreasure(): void
    {
        $user = UserFactory::createOne();

        $this->browser()
            ->actingAs($user)
            ->post('/api/treasures', [
                'json' => []
            ])
            ->assertStatus(Response::HTTP_UNPROCESSABLE_ENTITY)
            ->post('/api/treasures', [
                'json' => [
                    'name' => 'A shiny thing',
                    'description' => 'It sparkles when I wave it in the air.',
                    'value' => 1000,
                    'coolFactor' => 5,
                    'owner' => '/api/users/' . $user->getId(),
                ],
            ])
            ->assertStatus(Response::HTTP_CREATED)
            ->assertJsonMatches('name', 'A shiny thing');
    }

    public function testPatchToUpdateTreasure(): void
    {
        $treasure = DragonTreasureFactory::createOne();
        $this->browser()
            ->actingAs($treasure->getOwner())
            ->patch('/api/treasures/' . $treasure->getId(), [
                'json' => [
                    'value' => 12345,
                ],
            ])
            ->assertStatus(200)
            ->assertJsonMatches('value', 12345);


        $definitelyNotTheOwner = UserFactory::createOne();
        $this->browser()
            ->actingAs($definitelyNotTheOwner)
            ->patch('/api/treasures/' . $treasure->getId(), [
                'json' => [
                    'value' => 6789,
                ],
            ])
            ->assertStatus(403);


        $this->browser()
            ->actingAs($treasure->getOwner())
            ->patch('/api/treasures/' . $treasure->getId(), [
                'json' => [
                    'owner' => '/api/users/' . $definitelyNotTheOwner->getId(),
                ],
            ])
            ->assertStatus(422); // We can't change the owner thanks to isValidOwnerValidator
    }

    public function testOwnerCanSeeIsPublishedAndIsMineFields(): void
    {
        $treasure = DragonTreasureFactory::createOne(['isPublished' => false]);

        $this->browser()
            ->actingAs($treasure->getOwner())
            ->get('/api/treasures/' . $treasure->getId())
            ->assertStatus(200)
            ->assertJsonMatches('isPublished', false)
            ->assertJsonMatches('isMine', true);
    }

    public function testAdminCanPatchToEditTreasure(): void
    {
        $admin = UserFactory::createOneAdmin();
        $treasure = DragonTreasureFactory::createOne(); // Different owner generated by default

        $this->browser()
            ->actingAs($admin)
            ->patch('/api/treasures/' . $treasure->getId(), [
                'json' => [
                    'value' => 12345,
                ],
            ])
            ->assertStatus(200)
            ->assertJsonMatches('value', 12345)
            ->assertJsonMatches('isPublished', false);
    }

    public function testPostToCreateTreasureWithApiKey(): void
    {
        $this->browser()
            ->withFullUser()
            ->post('/api/treasures', [
                'json' => [],
            ])
            ->assertStatus(Response::HTTP_UNPROCESSABLE_ENTITY);
    }

    public function testPostToCreateTreasureDeniedWithoutScope(): void
    {
        $this->browser()
            ->withRestrictedUser()
            ->post('/api/treasures', [
                'json' => [],
            ])
            ->assertStatus(Response::HTTP_FORBIDDEN);
    }
}
